

--Corporate limit report


SELECT distinct LO.LIMIT_PREFIX LEG_CIF_ID ,LLT.LIMIT_PREFIX FIN_CIF_ID,CASE WHEN LO.LIMIT_PREFIX =LLT.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,gm.GROUP_NAME,
LO.limit_suffix LEG_limit_suffix ,LLT.limit_suffix fin_limit_suffix,CASE WHEN LO.limit_suffix =LLT.limit_suffix THEN 'TRUE' ELSE 'FALSE' END MATCH_limit_suffix,
LO.LIMIT_DESC LEG_LIMIT_DESC,LLT.LIMIT_DESC FIN_LIMIT_DESC,CASE WHEN LO.LIMIT_DESC =LLT.LIMIT_DESC THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_DESC,
PARENT_LIMIT_PREFIX,PARENT_LIMIT_SUFFIX,PLD.LIMIT_SUFFIX_DESC PARENT_LIMIT_SUFFIX_DESC,  gmp.GROUP_NAME parent_GROUP_NAME,
LO.CRNCY_CODE LEG_CRNCY_CODE ,LLT.CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN LO.CRNCY_CODE =LLT.CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_CRNCY_CODE,
SANCTION_LIMIT LEG_SANCTION_LIMIT,SANCT_LIM FIN_SANCTION_LIMIT ,CASE WHEN LO.SANCTION_LIMIT =LLT.SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_SANCT_LIM,
to_date(LO.LIMIT_APPROVAL_DATE,'dd-mm-yyyy') LEG_LIMIT_APPROVAL_DATE ,LIM_SANCT_DATE FIN_LIMIT_APPROVAL_DATE,CASE WHEN to_date(LO.LIMIT_APPROVAL_DATE,'dd-mm-yyyy') =LLT.LIM_SANCT_DATE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_APPROVAL_DATE,
to_date(LO.LIMIT_EXPIRY_DATE,'dd-mm-yyyy') LEG_LIMIT_EXPIRY_DATE ,LIM_EXP_DATE FIN_LIMIT_EXPIRY_DATE,CASE WHEN to_date(LO.LIMIT_EXPIRY_DATE,'dd-mm-yyyy') =LLT.LIM_EXP_DATE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIM_EXP_DATE,
commit_data.EXPIRY_DATE commitment_EXPIRY_DATE,llt.AVAILABILITY_END_DATE fin_AVAILABILITY_END_DATE,CASE WHEN nvl(commit_data.EXPIRY_DATE,sysdate) =nvl(llt.AVAILABILITY_END_DATE,sysdate) THEN 'TRUE' ELSE 'FALSE' END MATCH_commitment_EXPIRY_DATE,
LO.LIMIT_TYPE LEG_LIMIT_TYPE,LLT.LIMIT_TYPE FIN_LIMIT_TYPE, CASE WHEN nvl(LO.LIMIT_TYPE,' ') =nvl(LLT.LIMIT_TYPE,' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_TYPE,
LIAB FIN_LIABILITY,
CONTINGENT_LIAB FIN_CONTINGENT_LIABILITY,
trim(NOTES) LEG_COMMITMENT_REF,TRIM(FREE_TEXT) FIN_COMMITMENT_REF,CASE WHEN nvl(trim(NOTES) ,' ') =nvl(TRIM(FREE_TEXT),' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_COMMITMENT_REF,
trim(PURPOSE_OF_LIMIT) LEG_PURPOSE_CODE,case when trim(PURPOSE_OF_LIMIT)  is not null then TRIM(LLT.PATTERN_OF_FUNDING) end FIN_PURPOSE_CODE,CASE WHEN nvl(CASE WHEN trim(PURPOSE_OF_LIMIT) IS NOT NULL THEN TRIM(LLT.PATTERN_OF_FUNDING) END,' ') =nvl(TRIM(PURPOSE_OF_LIMIT),' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_PURPOSE_CODE
FROM LIMIT_CORE_o_TABLE LO
left join GROUP_MASTER_O_TABLE gm on gm.GROUP_ID = LO.LIMIT_PREFIX
left join GROUP_MASTER_O_TABLE gmp on gmp.GROUP_ID = LO.PARENT_LIMIT_PREFIX
left JOIN TBAADM.LLT LLT ON LLT.LIMIT_PREFIX = LO.LIMIT_PREFIX AND  LLT.LIMIT_SUFFIX = LO.LIMIT_SUFFIX
left join LIMIT_SUFFIX_CODE_AND_DESC PLD ON TRIM(PLD.LIMIT_SUFFIX_CODE) = TRIM(PARENT_LIMIT_SUFFIX)
left join (select distinct FIN_CIF_ID,EXPIRY_DATE,LIMIT_SUFFIX from COMMITMENT_LIMIT_DATA) commit_data on commit_data.FIN_CIF_ID = LO.LIMIT_PREFIX and commit_data.LIMIT_SUFFIX = LO.limit_suffix
where EXISTS( SELECT 1 FROM(
select DISTINCT TO_CHAR(FIN_CIF_ID) LIMIT_PREFIX from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'
UNION
SELECT DISTINCT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') AND 
LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450')
UNION
SELECT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('2') AND 
LIMIT_PREFIX IN(SELECT PARENT_LIMIT_PREFIX FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') 
AND LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'))
) B WHERE B.LIMIT_PREFIX =  LO.LIMIT_PREFIX
)
order by LO.LIMIT_PREFIX,LO.LIMIT_DESC;


--Bank limit report

SELECT distinct LO.LIMIT_PREFIX LEG_CIF_ID ,LLT.LIMIT_PREFIX FIN_CIF_ID,CASE WHEN LO.LIMIT_PREFIX =LLT.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,gm.REPORTING_GROUP_ID GROUP_NAME,
LO.limit_suffix LEG_limit_suffix ,LLT.limit_suffix fin_limit_suffix,CASE WHEN LO.limit_suffix =LLT.limit_suffix THEN 'TRUE' ELSE 'FALSE' END MATCH_limit_suffix,
LO.LIMIT_DESC LEG_LIMIT_DESC,LLT.LIMIT_DESC FIN_LIMIT_DESC,CASE WHEN LO.LIMIT_DESC =LLT.LIMIT_DESC THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_DESC,
PARENT_LIMIT_PREFIX,PARENT_LIMIT_SUFFIX,PLD.LIMIT_SUFFIX_DESC PARENT_LIMIT_SUFFIX_DESC, gmp.REPORTING_GROUP_ID parent_GROUP_NAME,
LO.CRNCY_CODE LEG_CRNCY_CODE ,LLT.CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN LO.CRNCY_CODE =LLT.CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_CRNCY_CODE,
SANCTION_LIMIT LEG_SANCTION_LIMIT,SANCT_LIM FIN_SANCTION_LIMIT ,CASE WHEN LO.SANCTION_LIMIT =LLT.SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_SANCT_LIM,
to_date(LO.LIMIT_APPROVAL_DATE,'dd-mm-yyyy') LEG_LIMIT_APPROVAL_DATE ,LIM_SANCT_DATE FIN_LIMIT_APPROVAL_DATE,CASE WHEN to_date(LO.LIMIT_APPROVAL_DATE,'dd-mm-yyyy') =LLT.LIM_SANCT_DATE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_APPROVAL_DATE,
to_date(LO.LIMIT_EXPIRY_DATE,'dd-mm-yyyy') LEG_LIMIT_EXPIRY_DATE ,LIM_EXP_DATE FIN_LIMIT_EXPIRY_DATE,CASE WHEN to_date(LO.LIMIT_EXPIRY_DATE,'dd-mm-yyyy') =LLT.LIM_EXP_DATE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIM_EXP_DATE,
LO.LIMIT_TYPE LEG_LIMIT_TYPE,LLT.LIMIT_TYPE FIN_LIMIT_TYPE, CASE WHEN nvl(LO.LIMIT_TYPE,' ') =nvl(LLT.LIMIT_TYPE,' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_TYPE,
LIAB FIN_LIABILITY,
CONTINGENT_LIAB FIN_CONTINGENT_LIABILITY,
trim(NOTES) LEG_COMMITMENT_REF,TRIM(FREE_TEXT) FIN_COMMITMENT_REF,CASE WHEN nvl(trim(NOTES) ,' ') =nvl(TRIM(FREE_TEXT),' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_COMMITMENT_REF,
trim(PURPOSE_OF_LIMIT) LEG_PURPOSE_CODE,CASE WHEN trim(PURPOSE_OF_LIMIT) IS NOT NULL THEN TRIM(LLT.PATTERN_OF_FUNDING) END FIN_PURPOSE_CODE,CASE WHEN nvl(CASE WHEN trim(PURPOSE_OF_LIMIT) IS NOT NULL THEN TRIM(LLT.PATTERN_OF_FUNDING) END,' ')=nvl(TRIM(PURPOSE_OF_LIMIT),' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_PURPOSE_CODE
FROM LIMIT_CORE_o_TABLE LO
left join GROUP_MASTER_O_TABLE gm on gm.GROUP_ID = LO.LIMIT_PREFIX
left join GROUP_MASTER_O_TABLE gmp on gmp.GROUP_ID = LO.PARENT_LIMIT_PREFIX
left JOIN TBAADM.LLT LLT ON LLT.LIMIT_PREFIX = LO.LIMIT_PREFIX AND  LLT.LIMIT_SUFFIX = LO.LIMIT_SUFFIX
left join LIMIT_SUFFIX_CODE_AND_DESC PLD ON TRIM(PLD.LIMIT_SUFFIX_CODE) = TRIM(PARENT_LIMIT_SUFFIX)
where NOT EXISTS( SELECT 1 FROM(
select DISTINCT TO_CHAR(FIN_CIF_ID) LIMIT_PREFIX from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'
UNION
SELECT DISTINCT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') AND 
LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450')
UNION
SELECT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('2') AND 
LIMIT_PREFIX IN(SELECT PARENT_LIMIT_PREFIX FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') 
AND LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'))
) B WHERE B.LIMIT_PREFIX =  LO.LIMIT_PREFIX
)
order by LO.LIMIT_PREFIX,LO.LIMIT_DESC; 
